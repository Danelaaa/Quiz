{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { interval } from 'rxjs';\nlet QuestionComponent = class QuestionComponent {\n  constructor(questionService) {\n    this.questionService = questionService;\n    this.name = \"\";\n    this.questionList = [];\n    this.currentQuestion = 0;\n    this.points = 0;\n    this.counter = 60;\n    this.correctAnswer = 0;\n    this.inCorrectAnswer = 0;\n    this.progress = \"0\";\n    this.isQuizCompleted = false;\n  }\n  ngOnInit() {\n    this.name = localStorage.getItem(\"name\");\n    this.getAllQuestions();\n    this.startCounter();\n  }\n  getAllQuestions() {\n    this.questionService.getQuestionJson().subscribe(res => {\n      this.questionList = res.questions;\n    });\n  }\n  nextQuestion() {\n    this.currentQuestion++;\n  }\n  previousQuestion() {\n    this.currentQuestion--;\n  }\n  answer(currentQno, option) {\n    if (currentQno === this.questionList.length) {\n      this.isQuizCompleted = true;\n      this.stopCounter();\n    }\n    if (option.correct) {\n      this.points += 10;\n      this.correctAnswer++;\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n    } else {\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.inCorrectAnswer++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n      this.points -= 10;\n    }\n  }\n  startCounter() {\n    this.interval$ = interval(1000).subscribe(val => {\n      this.counter--;\n      if (this.counter === 0) {\n        this.currentQuestion++;\n        this.counter = 60;\n        this.points -= 10;\n      }\n    });\n    setTimeout(() => {\n      this.interval$.unsubscribe();\n    }, 600000);\n  }\n  stopCounter() {\n    this.interval$.unsubscribe();\n    this.counter = 0;\n  }\n  resetCounter() {\n    this.stopCounter();\n    this.counter = 60;\n    this.startCounter();\n  }\n  resetQuiz() {\n    this.resetCounter();\n    this.getAllQuestions();\n    this.points = 0;\n    this.counter = 60;\n    this.currentQuestion = 0;\n    this.progress = \"0\";\n  }\n  getProgressPercent() {\n    this.progress = (this.currentQuestion / this.questionList.length * 100).toString();\n    return this.progress;\n  }\n};\nQuestionComponent = __decorate([Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.scss']\n})], QuestionComponent);\nexport { QuestionComponent };","map":{"version":3,"mappings":"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","names":["Component","interval","QuestionComponent","constructor","questionService","ngOnInit","name","localStorage","getItem","getAllQuestions","startCounter","getQuestionJson","subscribe","res","questionList","questions","nextQuestion","currentQuestion","previousQuestion","answer","currentQno","option","length","isQuizCompleted","stopCounter","correct","points","correctAnswer","setTimeout","resetCounter","getProgressPercent","inCorrectAnswer","interval$","val","counter","unsubscribe","resetQuiz","progress","toString","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Lukexsa\\Desktop\\Angular-Quiz\\quiz\\src\\app\\question\\question.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { interval } from 'rxjs';\nimport { QuestionService } from '../service/question.service';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.scss']\n})\nexport class QuestionComponent implements OnInit {\n\n  public name: string = \"\";\n  public questionList: any = [];\n  public currentQuestion: number = 0;\n  public points: number = 0;\n  counter = 60;\n  correctAnswer: number = 0;\n  inCorrectAnswer: number = 0;\n  interval$: any;\n  progress: string = \"0\";\n  isQuizCompleted : boolean = false;\n  constructor(private questionService: QuestionService) { }\n\n  ngOnInit(): void {\n    this.name = localStorage.getItem(\"name\")!;\n    this.getAllQuestions();\n    this.startCounter();\n  }\n  getAllQuestions() {\n    this.questionService.getQuestionJson()\n      .subscribe(res => {\n        this.questionList = res.questions;\n      })\n  }\n  nextQuestion() {\n    this.currentQuestion++;\n  }\n  previousQuestion() {\n    this.currentQuestion--;\n  }\n  answer(currentQno: number, option: any) {\n\n    if(currentQno === this.questionList.length){\n      this.isQuizCompleted = true;\n      this.stopCounter();\n    }\n    if (option.correct) {\n      this.points += 10;\n      this.correctAnswer++;\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n\n\n    } else {\n      setTimeout(() => {\n        this.currentQuestion++;\n        this.inCorrectAnswer++;\n        this.resetCounter();\n        this.getProgressPercent();\n      }, 1000);\n\n      this.points -= 10;\n    }\n  }\n  startCounter() {\n    this.interval$ = interval(1000)\n      .subscribe(val => {\n        this.counter--;\n        if (this.counter === 0) {\n          this.currentQuestion++;\n          this.counter = 60;\n          this.points -= 10;\n        }\n      });\n    setTimeout(() => {\n      this.interval$.unsubscribe();\n    }, 600000);\n  }\n  stopCounter() {\n    this.interval$.unsubscribe();\n    this.counter = 0;\n  }\n  resetCounter() {\n    this.stopCounter();\n    this.counter = 60;\n    this.startCounter();\n  }\n  resetQuiz() {\n    this.resetCounter();\n    this.getAllQuestions();\n    this.points = 0;\n    this.counter = 60;\n    this.currentQuestion = 0;\n    this.progress = \"0\";\n\n  }\n  getProgressPercent() {\n    this.progress = ((this.currentQuestion / this.questionList.length) * 100).toString();\n    return this.progress;\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}